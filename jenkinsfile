def updateGitHubStatus(state, description) {
         def COMMIT_SHA = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()

         sh """
              curl -X POST \
              -H 'Accept: application/vnd.github.v3+json' \
              'https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/statuses/$COMMIT_SHA' \
               -d '{"state": "$state", "context": "$CONTEXT", "description": "$description", "target_url": "$TARGET_URL"}'
             """
    }

pipeline {
  agent any
    environment {
        nombreBaseDeDatos = "Employees"
        archivoSQL = "sqlite.sql"
        nombreBackup="backup.db"
        REPO_OWNER = 'CarlosD21'
        REPO_NAME = 'PROF-2023-Ejercicio4'
        GITHUB_CONTEXT = 'Jenkins'
        TARGET_URL="http://ec2-54-224-87-86.compute-1.amazonaws.com:8080/"
        STATE_SUCCESS = 'success'
        STATE_FAILURE = 'failure'
        CONTEXT = 'Jenkins'
        DESCRIPTION_SUCCESS = 'Build successful'
        DESCRIPTION_FAILURE = 'Build failed'
}
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/GRISE-UPM/PROF-2023-Ejercicio4.git'
      }
    }
    stage('Backup') {
      steps {
        sh 'sqlite3 Employees < sqlite.sql'
      }
    }
    stage('Drop') {
      steps {
        sh 'echo "DROP DATABASE IF EXISTS Employees;" | sqlite3'
      }
    }
    stage('Create') {
      steps {
        sh 'sqlite3 < sqlite.sql'
      }
    }
    stage('Restore') {
      steps {
        sh 'sqlite3 Employees < backup.sql'
      }
    }
    stage('Status Check') {
      steps {
        script {
          def status = sh(returnStdout: true, script: 'sqlite3 Employees "SELECT COUNT(*) FROM employees;"').trim()
          if (status == '0') {
            status = 'FAILED'
          } else {
            status = 'SUCCESS'
          }
          step([
            $class: 'GitHubCommitStatusSetter',
            commitSha: env.GIT_COMMIT,
            status: status,
            context: 'Database maintenance'
          ])
        }
      }
    }
  }
}
